====DAY 1: Terminal commands

1. cd (change directory)
2. mkdir (make directory)
3. ls (list files in a directory)
4. ls -l (to show details)
5. cd .. (exit folder)


*****************************************************************************************************************************
*****************************************************************************************************************************
====DAY 2: 9/4/2018
+++*github link/repository:*+++
https://github.com/cristobalpeegenrose/web-portfolio.git 

+++*portfolio link: +++*
https://cristobalpeegenrose.github.io/web-portfolio/home.html

Read documentation
Use your Google-fu
Ask your classmate/instructors

+++*Terminal Commands:*+++
pwd- present working directory


+++*Commands in Terminal in Pushing file to Repository in github*+++
1. git config --global user.name = "username" ex. git config --global user.name = cristobalpeegenrose
2. git config --global user.email = "email" ex. git config --global user.email = cristobal.peegenrose@gmail.com
3. git init =  git initialize 
4. git add -A  = take everthing inside a folder to push 
5. git status 
6. git commit -m "First commit for web portfolio"
7. git remote add origin https://github.com/cristobalpeegenrose/web-portfolio.git
8. git push -u origin master or git pull origin master (if you edit something at home)

+++*Git Push: Push from local to repository (gitlab/github)*+++
Git- Online Repository of codes so you can access them anywhere

First Time (PUSH): 
1. Go to your project directory
2. git init (initializes a connection between your local and repository;done only once per directory/project)
3. git add -A (adds ALL files and directories in your project)
4. git status (check which files are added to be committed)
5. git commit -m "<message>" (Commits all changes done/added/removed) Note: Message should be descriptive and present tense; Version Control
6. git remote add <alias> <link/url> ex. git remote add origin https://..... 
7. git push <alias> master ex. git push origin master

Updates:
1. git add -A
2. git commit -m "<message>"
3. git push <alias> master

Pulling the first time:
1. Make the directory you want
2. git init
3. git remote add <alias> <link>
4. git pull <alias> master

Future pulls:
1. Go to the project
2. git pull <alias> master

SOP
Working in class/home
1. (Start of Day) Pull from gitlab
2. Work
3. (end of Day) Push to gitlab

TOPIC: INTERNET 

Capstones:
1. Static
2. E-Commerce 
3. Using Laravel Framework
Student Portfolio

Timelines:
3rd Week -Capstone1 Development (atleast 5 static projects)
7th and 8th Week - Capstone2 Development 
10th and 11th Week -Capstone3 Development
12th Week Completion of Requirements
13th Week Clearance and Graduation

Tips: 
1. Allot 1 day for deployment


TOPIC: INTRODUCTION TO HTML
1.Hyper Text Markup Language (HTML) 
- describes the Structure of web pages; not a programming language
- uses elements to describe the structure of pages
- anything between (and including) two tags <> and </> is the body element
Note: for tags always use lower case
2. attributes - provide extra info about an HTML element
3. What we need? Text Editors and Web Browsers
4. Different Kinds of HTML tags (Doc Structure, Text Formatting, Link formatting...)


=TAGS=
A. Document Structures:
i. HEADINGS
	1. Headings -provide title or theme for each section of the page
			six levels or ranks of headings - h1, h2, ... ,h6
			same rank /level is as of same importance
			Each heading is a Block Element
	2. Include only one H1 tag on each page, should describe the topic of the page
	3. Make sure each tag supports its preceding sequential number
	4. Dont use the same heading on every page
	5. Dont use heading tags solely to increase font size and dont use heading tags for large bodies of text (20-70char should be enough)

Element vs Tag
<h1> = tag
<h1>Hello!</h1> = Element

ii. Paragraph
	1. Defines a simple paragraph of text; Block element
	2. <p> tag

iii. Document Divisions -used for grouping <div>
	1. Nested elements (P tags inside Div tag)
	2. For readability, nested elements are indented
	3. Inline container 
iv. SPAN
	ex.:
	<div> I plan to make this text <span style="color:red">red</span></div>
v. Break 
    1. Line Break - Block element; <br>; do not use line break for two paragraphs
			<p>This paragraph will have<br>two lines</p>
	2. Horizontal Rule - Block Element; <hr> ; adds horizontal line


B. Text Formatting
1. Strong - Contents in Bold 
ex. :
<p><strong>BEWARE</strong> of Dogs.</p>

Bold vs. Strong;  Best Practice: Use <strong> instead of <b>
2. Emphasis -Changes the meaning of the sentence; by default will show contents in italics
ex.: 
<p>I <em>think</em> Shiela was the first.</p>


3. Superscript  - exponents 
ex. <p>I was born on the 4<sup>th</sup> of November</p>
4. Subscripts - used in footnotes or chemical formulas
ex. 
p>The amount of C0<sub>2</sub> in the atmosphere grew by 2ppm in 2010.</p>
5. Abbreviation	
ex.: <p>We use <abbr title="HyperText Markup Language">HTML</abbr> to create web pages.</p>
6. Block Quote
7. Quote <q>- use for shorter quotes that sit within a paragraph
 use <q> tag for quotes
8. Cite (attribute)- Usually goes with <blockquote

ex.:	
<p>We use <abbr title="HyperText Markup Language">HTML</abbr> to create web pages.</p>
	<blockquote cite="http://www.imdb.com/character/ch0000672/quotes">
		<p>You know the golden rule, don't you boy? Those who 
		have the gold make the rules.</p>
		<footer>-Crazy hunch-backed old guy in Aladdin</footer>
8. Quote 
ex.: <p>According to Mozilla's website,
	<q cite="https://www.mozilla.org/en-US/about/history/details/">Firefox 1.0 
	was released in 2004 and became a big success. </q></p>
9.Nested Quote
ex.: 
<p>Luke continued, <q>And then she called him a <q>scruffy-looking nerf-herder</q>! I think I've got a chance! </q> The poor naive fool...</p>
10. Insert - usually underlined
11. Delete - Usually has a line through it

ex. Insert & Delete
<p>Frankly, it was the <del>worst</del> <ins>best</ins> idea he had ever had</p>

12. Strike - usually displayed 
ex.:
		<p>Buy this laptop Now!</p>
		<p><s>was $1000</s></p>
		<p>Now only $200</p>
13. Small - side comments and small print
ex.:  <p>Authors are encouraged to use their best judgement when determining whether to use &lt;small&gt; or CSS</p> <small>Posted on April 30</small>


*****************************************************************************************************************************
*****************************************************************************************************************************

===DAY 3: September 05, 2018====

C. LINKS FORMATTING
1. Writing Links
	links are created using <a> (anchor) element
	Specify which page to link to using href 
	ex.:
	<a href="http://google.com">Let's go to Google!</a>
	<a href="url">(any text/img)</a>

Absolute URL
-you must use this when referring links on different servers
-actual address/exact
<a href="http://google.com">Let's go to Google!</a>

Relative URl
-using another point of reference
ex.<p><a href="social.html">SOCIAL MEDIA LINK</a></p> 

References:
.. (1 level up)
a. Parent to Child
	child/grandchild/filename
b. Sibling to Sibling
	../sibling/filename
c. Grandchild to Grandparent
	../../filename

Email Links:
1. Basic
ex: <a href="mailto:someone@yoursite.com">Email Us</a>
2. Adding a Subject

Opening Links in a New Window
-Use target attribute in the opening <a> tag

ex. <a href="http://google.com" target="_blank">Let's go to Google!</a>

Linking to a Sepcific Part of the Same Page
-A basic link command pointing to another section of the page
	<a href="#targetname"> Back to top </a>
- The point where the page will jump
	<section id="targetname"> This is the top section</section>

D. LISTS FORMATTING
Three Types of Lists:
1. Ordered lists  - each number in the list is numbered
	Created with the <ol> element
	Each item is placed between <li> tag
	ex.: 
	<ol>
		<li> Listen to Music Daily </li>
		<li> Find Beats </li>
		<li> Write your Music </li>
		<li> Create the Scratch Track </li>
		<li> Get Feedback! </li>

	</ol>
2. Unordered List - a list that begins with a bullet point 
	Created with the <ul> element
	ex.:
	<ul>
		<li> 50g butter</li>
		<li> 2 eggs</li>
		<li> 10ml milk</li>
		<li> Salt and pepper to taste</li>
		<li> 5 medium-sized oranges</li>
	</ul>
3.	Nested List
	ex
	<ul>
		<li>Reptiles</li>
		<li>Mammals</li>
			<ul>
				<li>Cow</li>
				<li>Cat</li>
			</ul>
		<li>Birds</li>
		<li>Amphibians</li>
	</ul>
4. Definition List - Made up of set of terms along with the definitions for each of those terms
    Definition list of created with the <dl> element
    <dt> is used to contain the term being defined
    <dd> is used to contain the definition
    ex.: 
    <dl>
		<dt>Empathy</dt>
		<dd>the imaginative projection of a subjective state into an object so that the object appears to be infused with it</dd>
		<dt>Impanel</dt>
		<dd>To choose people to serve on a jury</dd>
	</dl>


E. IMAGES FORMATTING
The <img> element is used to add images to a web page
An image element must carry two attributes
	src - indicates the source of an image
	alt - describes the content of the image

	jpeg, jpg, gif, bmp,
	gimp - GNU Image Manipulation Program

ex. 
	<a href="http://blog.tuitt.com"> (use href for link image to a page)
	<img src="assets/img/tuitt_logo.png" alt="This is the logo of Tuitt"></a>
Tips:
 1. Save images at the size you will be using them on the web page and in the appropriate format
 2. Photographs are best saved as JPEGs; illustrations or logos that use flat colors are better saved as GIFs

1. Image Map
	Rarely used, use GoogleMaps instead


F. TABLES

ex.:
<table>
		<tr>
			<td>1</td>  -- row 1 column 1
			<td>2</td>  -- row 1 column 2
			<td>3</td>  -- row 1 column 3
		</tr>
		<tr>
			<td>4</td>  -- row2 column 1
			<td>5</td>  -- row2 column 2
			<td>6</td>  -- row2 column 3
		</tr>
</table>

1. Table Headings <th>
If a cell is empty, iser a <td> or <th> to represent the presence of an empty cell

ex. (with headings)
<table>
	<tr>
		<th></th>
		<th scope="col">Saturday</th>
		<th scope="col">Sunday</th>
	</tr>
	<tr>
		<th scope="row">Tickets sold:</th>
		<td>120</td>
		<td>135</td>
	</tr>
	<tr>
		<th scope="row">Total sales:</th>
		<td>$600</td>
		<td>$645</td>

	</tr>

</table>

<th> - makes headings bold

2. Spanning Columns
The colspan attribute can be used on an <th> or <td> element and how many columns that a cell should run across

3. Spanning Rows

G. FORMS

HTML forms allows you to collect information form visitors to your site

Form Controls
Adding Text (Text input, pw input, text area)
Making Choices (radio buttons, checkboxes, drop-down boxes)
Submitting forms (submit buttons, image buttons, file upload)

1. Uses form to fill out information and presses a button to Submit information to the server
2. 

Form Structures
Form controls live inside <form> element. This element should always carry the action attribute and usually have a method attribute, too.

Action - where to send the form
method - how to send the form

Required Attributes:
	1. type - type for form
	2  Name - unique identifier of the form
	ex.:
	Form Format:
	<form action="" method="">
		<label>Username:</label><input type="text" name="username">
	</form>
	input type: text, password, number
	name: the one checked by server when submitting forms.
	label for - must have id
	allowed:
	<label> name: <input type> </label>
Radio Button - one selection only
Check Box - use this for more than 1 selection

Use lowercase for names and values

Other attributes:
1. placeholder - defined a non-selectable placeholder text that only appears when the input is empty
2. required - Tells the browser that the input is required 
3. disable - 

File input
ex. <input type="file" name="profile_pic">

Button
Label - to associate label with a form <input> field


Group Form elements

H. Semantic HTML
-HTML markup should convey the underlying meaning of contents - not their appearance

Identifiable Sections

Header
	nav
Article
	Figure
Aside
Footer

Header - introductory content for a section, article, or entire web page
	-can be company logo to navigational aids or author information
Nav Element - marks up various navigation sections of a website
	-common use case includes main site navigation, links to related pages in a sidebar and tables of content
Footer - basically same as headers 
	-common use include copyright notices, footer navigation, and author bios at the end of blog posts

Aside - when inside an article can be 
used to place advertisements, or highlight definitions, stats and quotation

	-when outside the article is associated with the page as a whole. This makes it a good choice for marking up a site-wide sidebar
Figure - represents a self-contained figure like an image, diagram, illustration or even a code snippet
	<figcaption>- associates caption with its parent <figure> element

Document info (HTML Head)
The <head> element defines a container for a web pages metadata (data about data)
-can contain the title, style, 

Comments

CSS- dont forget semi-colon (;) for each end



===DAY 4: September 06, 2018====


HTML DOM (Document Object Model)
source: https://www.w3schools.com/js/js_htmldom.asp
is a standard how to get, change, 
	standard object model and programming interface for HTML




===DAY 5: September 07, 2018===
Intro to Gitlab repository
Placeholder # - put this if not sure where to link

Class vs ID
Id should be unique.
class can be repeated; if you have part of the web with same styles. 

lorempixel - placeholder images

INTRO TO CSS
CSS (Cascading Style Sheets)
-created to help make uniform changes

CSS Syntax and Selectors
Consists of the following block
1. Selector
	ID
	Class
	Tag
2. Declaration
	Property
	value
	semi-colon
	{(property):(value)}
	curly braces
	square brackets

Cascade in Cascading Style Sheets

3 Main Ways Styles Cascade
1. 
2. One 
3. One stylesheet can be applied to many pages across a website

Selectors- use to identify specific HTML element to give them styles that they need

1. Type Selector - matches all elements with the specified tag name on the page
	Syntax:
	element{ 
		style: properties;
	}

2. ID Selector -matched all elements that have an ID attribute with the value specified
	
	Syntax:

	#id_value {
		style: property;
	}

	Note:
	a.Ids are unique
	b. each element can only have a single ID
	c. Each page can have only one element with that ID
	d. Select IDs using a #

3. Class Selector - matches all elements that have a class attribute with the value specified
	
	Syntax: 

	.class_name{
		style: property;
	}


4. Attribute Selector - matches elements based on the prsence or value if a given attribute
 
 	Syntax:

 	[attr=value] {style: property;}

 	ex. 

 	[type="text"] {
 		border-radius: 5px;
 	}


5. Universal Selector - Selects all elements
	Syntax:

	* {
		style: property;
	}



ctl+shift+r = hard refresh

3 Ways to Insert CSS

1. External Stylesheet
	-different file
		can be used in multiple pages
		.css

	<link rel="stylesheet" type="text/css" href="./assets/css/style.css">

2. Internal Stylesheet
	- within the same file
	if one page has a unique style

	Syntax:
	<head>
		<style>
			<!--Your CSS rules here<!-->
		</style>
	</head>

3. Inline Style
	used to apply a unique style for a single element
	add the style attribute for the relevant element

	Syntax:
	<h1 style="color: blue; margin-left: 30px;"> 
		This is a heading
	</h1>


++COMBINATORS++

-	A combinator is something that explains the relationship between the selectors.

A CSS selector can contain more than one simple selector. Between the simple selectors, we can include a combinator.

USed to target specific elements

There are four different combinators in CSS:

1. Adjacent Sibling Selector (+)

	Separates two selectors and matches the second element only if it immediately follows the first element, and both are children of the same parent element, and "adjacent" means "immediately following".

The following example selects all <p> elements that are placed immediately after <div> elements:

Syntax:

former_element + target_element {
	style: property:
}

ex. 
div + p {
    background-color: yellow;
}



2. General Sibling Selector (~)


separates two selectors and matches the second element only if it follows the first element (though not necessarily immediately) and both are children of the same parent element.


The general sibling selector selects all elements that are siblings of a specified element.

The following example selects all <p> elements that are siblings of <div> elements: 

Syntax:

former_element ~ target_element {
	style: property:
}

ex.:
div ~ p {
    background-color: yellow;
}


3. Child Selector (>)

Separates two selectors and matches only those elements matched by the second selector that are children of elements matched by the first.

The child selector selects all elements that are the immediate children of a specified element.

The following example selects all <p> elements that are immediate children of a <div> element:

Syntax:

former_element > target_element {
	style: property:
}
ex. 

div > p {
    background-color: yellow;
}



4. Descendant Selector (whitespace)
typically represented by a single space character - combines two selectors such that elements matched by the second selector are selected if they have an ancestor element matching the first selector.


The descendant selector matches all elements that are descendants of a specified element.


Syntax:

former_element  target_element {
	style: property:
}


The following example selects all <p> elements inside <div> elements: 

ex. 
div p {
    background-color: yellow;
}

+ and ~ === siblings
> and (space) === children and descendants

Note: Multiple combinators can be used in a single selector

Pseudo Classes

A pseudo-class is used to define a special state of an element.

For example, it can be used to:

Style an element when a user mouses over it
Style visited and unvisited links differently
Style an element when it gets focus

The syntax of pseudo-classes:

1. :focus
selector:pseudo-class {
    property:value;
}

2. :hover - matches when the user interacts with an element with a pointing device, but does not necessarily activate it
Selects links on mouse over

div:hover {
    background-color: blue;
}

3. :active CSS -triggered when

Selects the active link
4. :visited
5. :link - Selects all unvisited links

Example:

/* unvisited link */
a:link {
    color: #FF0000;
}

/* visited link */
a:visited {
    color: #00FF00;
}

/* mouse over link */
a:hover {
    color: #FF00FF;
}

/* selected link */
a:active {
    color: #0000FF;
}

Grouping CSS Selectors

Selectors can be grouped by separating each one with a comma

Ex: p, #test, .test, .boxtitle {style: properties;}


Specificity (Priority)

	the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied

	it is based on the matching rules which are composed of diff sorts of CSS selectors

Specificity Hierarchy

Every selector has its place in the specificity hierarchy. There are four categories which define the specificity level of a selector:

Inline styles - An inline style is attached directly to the element to be styled. Example: <h1 style="color: #ffffff;">.

IDs - An ID is a unique identifier for the page elements, such as #navbar.

Classes, attributes and pseudo-classes - This category includes .classes, [attributes] and pseudo-classes such as :hover, :focus etc.

Elements and pseudo-elements - This category includes element names and pseudo-elements, such as h1, div, :before and :after.



How to Measure specificity?

Style attribute, ID, Class, pseudo class, attribute, elements

Higher number; higher specificity

Add 1000 for style attribute
add 100 for each ID
add 10 for Class, pseudo class, attribute
add 1 for element


ex. 

body #content .data img:hover {style: properties}

Specificity value = 122
100 for #content
10 for .data
10 for :hover
1 for body
1 for img (considered as pseudo element dahil may nakakabit na psuedo class)


If with equal specificity the order will matter-- the last in order will be followed. 


Ex:
nav > ul > li > a:hover

14

elements:
nav, ul, li, a
pseudoclass:
:hover


=====DAY 6: September 10, 2018==== 
HTML elements are considered boxes

CSS Box Model

Each HTML element is either a "block" box or an "inline" box

Changing Box Behavior
We can override the default box type of HTML Elements by using display property

ex: display:block;


Inline/Block Elements


Block level elements in HTML:

<address><article><aside><blockquote><canvas><dd><div><dl><dt><fieldset><figcaption><figure><footer><form><h1>-<h6><header><hr><li><main><nav><noscript><ol><output><p><pre><section><table><tfoot><ul><video>

Inline elements in HTML:

<a><abbr><acronym><b><bdo><big><br><button><cite><code><dfn><em><i><img><input><kbd><label><map><object><q><samp><script><select><small><span><strong><sub><sup><textarea><time><tt><var>


Box Model (in order inner - outer)
1. Content -text, media or other media content
2. Padding -space bet the box content and border

	

3. Border -space bet padding and margin
4. Margin - space between surrounding boxes


Inline vs. Block Elements
Inline
	vertical spacing not applied
	width is based on content
	margins only apply to sides (horizontal margins display)
	cannot adjust width and heught


Block
	vertical spacing applied
	width is based on parent container
	horizontal and vertical margins display
	can adjust width and height


vertical margin collapse
1. 
to prevent collapse put an invisible div


Only consecutive elements can collapse into each other. Putting an element with non-zero height between our paragraph forces them to display the 25px top margin and the 50px bottom margin.

2. Stick to a bottom-only or top-only margin convention


padding a b c d (a-top, b-right, c- bottom, d-left)
padding a b (a-top/bottom, b-left/right)
padding a b c (a-top,  b-right/left, c- bottom)


Generic Boxes
Div and Span

Div - block
Span - inline

Explicit Dimensions

Border box - forces the actual w

Centering with auto margins
auto 

Resetting styles
-by using the universal selector
* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}


CSS Positioning
Learn how to control the position of elements using:
1. Static
2. Relative 
3. Absolute
4. Fixed

Key concepts in Positioning Elements

1. Normal flow/Static Positioning
	not moving
	syntax:
	element {
		position: static; /*default*/
	}

	move it using paddings and margins

2. Relative 
	wih another object/reference element as a reference point
	relative to original position

3. Absolute
	the reference point is the browser window
	Relatively absolute 
	1st - find the parent to serve as reference point
	2nd - put position (absolute, relative, fixed)
	3rd - child/descendant should have absolute positioning
	4th - feel free to style around

4. Fixed
	-doesnt change even if you scroll up and down




Note: to pull from the top use negative (-) values
CSS allows for negative margin values
ex:


p {
	position: static;
	margin-left: 50px; 
	margin-top: -20px;

}

margin: 0 auto; -center


Overlapping Elements
z-index

When using relative, fixed or absolute positioning boxes can overlap
use z-index. It is used to control which property/element will be on top. 

=======DAY 7: September 11, 2018====

THE FLOAT PROPERTY
-lets block elements to stack side by side

The CSS float property specifies how an element should float.

The CSS clear property specifies what elements can float beside the cleared element and on which side.

 the float property can be used to wrap text around images.

 The float property is used for positioning and layout on web pages.

The float property can have one of the following values:

left - The element floats to the left of its container
right- The element floats to the right of its container
none - The element does not float (will be displayed just where it occurs in the text). This is default
inherit - The element inherits the float value of its parent

When  you float multiple elements they will 

THE CLEAR PROPERTY

The clear property specifies what elements can float beside the cleared element and on which side.

The clear property can have one of the following values:

none - Allows floating elements on both sides. This is default
left - No floating elements allowed on the left side
right- No floating elements allowed on the right side
both - No floating elements allowed on either the left or the right side
inherit - The element inherits the clear value of its parent
The most common way to use the clear property is after you have used a float property on an element.

When clearing floats, you should match the clear to the float: If an element is floated to the left, then you should clear to the left. Your floated element will continue to float, but the cleared element will appear below it on the web page.

Example of relative absolute:

#banner {
	background-color: skyblue;
	height: 700px;
	position: relative;
}	

.hero {
	border: 5px solid white;
	padding: 40px;
	width: 40%;
	text-align: center;
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);

}


WildCard - can be used in any attribute (ex. class, id)

ex:

img[alt*="gallery"] 
/*wildcard; target all imgs with the word service*/
	{

    border: 1px solid black ;
	height: 100%;
	width: 100%;
	/*we need to do this in order to 
	have the width and height properties take
	effect becaus image is an inline element
	and their heights and width can't be set*/
	display: block; 
	float: left;
}


=======DAY 8: September 12, 2018====
CSS Exercises 1-10